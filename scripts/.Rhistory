intro <- substr(lyric, 1, 13)
intro
fruits <- substr(lyric, 15, nchar(lyric))
fruits
fruits_e <- gsub("a", "ee", fruits)
fruits_e
fruits_o <- gsub("a", "o", fruits)
fruits_o
lyric_e <- paste(intro, fruits_e)
lyric_e
paste(intro, fruits_o)
a <- c(4, 4, 8)
b <- c(2, 1)
c <- a + b
a <- c(4, 4, 8)
b <- c(2, 1)
c <- a + b
a <- c(4, 4, 8)
b <- c(2, 1)
c <- a + b
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
a <- c(4, 4, 8)
b <- c(2, 1, 0)
c <- a + b
a <- c(4, 4, 8)
b <- c(2, 1, 0)
c <- a + b
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
a <- c(4, 4, 8)
b <- c(2, 1, 0)
c <- a + b
c
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
# A vector of student names
student_names <- c("Nate", "Ani", "Jeremy", "Daria")
# A vector of student grades (that correspond to the names above based on their position)
student_grades <- c(82, 74, 91, 92)
student_grades[student_grades > 82]
student_grades[student_grades > 82]
student_names[student_grades > 82]
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
# A vector of student names
student_names <- c("Nate", "Ani", "Jeremy", "Daria")
# A vector of student grades (that correspond to the names above based on their position)
student_grades <- c(82, 74, 91, 92)
student_grades[student_grades > 82]
student_grades[student_grades > 82]
student_names[student_grades > 82]
grades <- list(
exam_1 = c(100, 94, 93),
exam_2 = c(88, 91, 98)
)
min(grades)
grades <- list(
exam_1 = c(100, 94, 93),
exam_2 = c(88, 91, 98)
min(grades)
lapply(min, grades)
lapply(grades, min)
prices <- c(9, 44, 2, 3, 5)
prices[prices < 5] <- 5
prices <- c(9, 44, 2, 3, 5);
prices[prices < 5] <- 5
prices[prices < 5]
prices < 5
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
# A vector of student names
student_names <- c("Nate", "Ani", "Jeremy", "Daria")
# A vector of student grades (that correspond to the names above based on their position)
student_grades <- c(82, 74, 91, 92)
student_grades[student_grades > 82]
student_grades[student_grades > 82]
student_names[student_grades > 82]
first_score <- 100
second_score <- 200
average_score <- (first_score + second_score) / 2
average_score
first_score <- 90
average_score
# Store information about an applicant to a job position
applicant <- list(
degree = "Informatics",
languages = c("R", "JavaScript", "Python"),
interests = c("Healthcare", "Data Science")
)
applicant[languages]
applicant["languages"]
applicant$languages
applicant[["languages"]]
applicant <- list(
degree = "Informatics",
languages = c("R", "JavaScript", "Python"),
interests = c("Healthcare", "Data Science")
)
applicant$languages
# Store information about an applicant to a job position
applicant <- list(
degree = "Informatics",
languages = c("R", "JavaScript", "Python"),
interests = c("Healthcare", "Data Science")
applicant[languages]
applicant["languages"]
applicant$languages
applicant[["languages"]]
applicant[languages]
applicant["languages"]
applicant <- list(
degree = "Informatics",
languages = c("R", "JavaScript", "Python"),
interests = c("Healthcare", "Data Science")
applicant["languages"]
applicant <- list(
degree = "Informatics",
languages = c("R", "JavaScript", "Python"),
interests = c("Healthcare", "Data Science")
applicant["languages"]
applicant <- list(
degree = "Informatics",
languages = c("R", "JavaScript", "Python"),
interests = c("Healthcare", "Data Science")
applicant["languages"]
install.packages(tidyverse)
tidyverse
install.packages("tidyverse")
meal <- list(pasta, length(2))
meal <- list(pasta length(2))
meal <- list(pasta, wine)
meal <- list("pasta", "wine")
meal <- list(pasta, wine)
list ?
list
list
meal <- list("pasta", "wine")
meal <- c("pasta", "wine")
num <- list(1, 2)
meal <- c("pasta", "wine")
meal <- c("pasta", "wine")
num <- list(1, 2)
lapply(num, meal)
lapply(num, lenght(meal))
lapply(num, length(meal))
lapply(meal, length(num))
lapply(length(num))
lapply(length(meal))
list()
list
meal <- c("pasta", "wine")
items <- (meal, length)
items
add_pizza <- function(meal) {
meal <- c(meal, "pizza")
meal
add_pizza <- function(meal) {
meal <- c(meal, "pizza")
meal
}
num <- runif(10)
num
num <- as.list(runif(10))
num
num <- as.list(runif(10, 0, 10))
num <- as.list(runif(10, 0, 100))
num
num <- as.list(runif(10, 0, 100))
num
lapply(num, round, 1)
sentence <- tolower("I like to eat apples and bananas.")
sentence
letters <- strsplit(sentence, "")
letters
letter
letter_vector
# Extract the vector of letters from the resulting list
letter_vector <- letters[[1]]
letter_vector
# Use the `unique()` function to get a vector of unique letters
letter_unique <- unique(letter_vector)
letter_unique
lenth(all_letters[all_letters == letter_vector]
count_occurrences <- function(letters, all_letters)
lenth(all_letters[all_letters == letter_vector]
count_occurrences <- function(letters, all_letters) {
lenth(all_letters[all_letters == letter_vector]
}
count_occurrences <- function(letters, all_letters) {
length(all_letters[all_letters == letter_vector]
}
count_occurrences <- function(letters, all_letters){
length(all_letters[all_letters == letter_vector]
}
# Define a function `count_occurrences` that takes in two parameters: a letter
# and a vector of letters. The function should return how many times that letter
# occurs in the provided vector.
# Hint: use a filter operation!
count_occurrences <- function(letters, all_letters){
}
e_count <- count_occurrences("e", letters)
e_count
Tools -> Global Options -> Code -> Display
# Load packages
library("dplyr")
library("ggmap")
library("ggplot2")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
# Formatting and filtering data
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
# Chart option 1: years as categories
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
# Chart option 2: years as continuous
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = year
) + scale_color_continuous() +
labs(color = "Year")
# Chart option 1: years as categories
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
library("ggplot2")
# Load packages
library("dplyr")
library("ggmap")
"ggmap"
library("ggmap")
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = blue))
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = blue))
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, color = "blue"))
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = race))
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = race))
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = 'race'))
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = 'race'))
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value ))
library("knitr")
library("dplyr")
source("table-of-summary-information.R")
source("top-10-most-committed-crimes.R")
source("chicago_map.R")
source("summary-information.R")
source("plot_heat.R")
library("knitr")
library("dplyr")
source("table-of-summary-information.R")
source("top-10-most-committed-crimes.R")
source("chicago_map.R")
source("summary-information.R")
source("plot_heat.R")
chicago_crime_10y <- read.csv("./data/chicago_crime_10y.csv")
setwd("~/Documents/info201/final-project-mightymango/scripts")
chicago_crime_10y <- read.csv("./data/chicago_crime_10y.csv")
#find number of each crime type
number_each_type <- chicago_crime_10y %>%
group_by(District, Primary.Type)  %>%
summarize(Crime.count = n())
number_each_type
#plot heatmap with a log of `Crime.count`
#able to see which crime type occured most offten
htmap_with_log <- ggplot(data = number_each_type, aes(x = District, y = Primary.Type)) +
geom_tile(aes(fill = Crime.count)) +
scale_fill_gradient2(trans = "log") +
theme(axis.text.y = element_text(size = 6)) +
theme(axis.text.x = element_text(size = 7, angle = 45, hjust = 1))
htmap_with_log
#plot heatmap with a log of `Crime.count`
#able to see where crime type occur most offen
chart3 <- htmap_no_log <- ggplot(data = number_each_type, aes(x = District, y = Primary.Type)) +
geom_tile(aes(fill = Crime.count)) +
scale_fill_gradient2() +
theme(axis.text.y = element_text(size = 6)) +
theme(axis.text.x = element_text(size = 7, angle = 45, hjust = 1))
htmap_no_log
chicago_crime_10y <- read.csv("./data/chicago_crime_10y.csv")
number_each_type <- chicago_crime_10y %>%
group_by(District, Primary.Type)  %>%
summarize(Crime.count = n())
number_each_type
htmap_with_log <- ggplot(data = number_each_type, aes(x = District, y = Primary.Type)) +
geom_tile(aes(fill = Crime.count)) +
scale_fill_gradient2(trans = "log") +
theme(axis.text.y = element_text(size = 6)) +
theme(axis.text.x = element_text(size = 7, angle = 45, hjust = 1))
htmap_with_log
htmap_no_log <- ggplot(data = number_each_type, aes(x = District, y = Primary.Type)) +
geom_tile(aes(fill = Crime.count)) +
scale_fill_gradient2() +
theme(axis.text.y = element_text(size = 6)) +
theme(axis.text.x = element_text(size = 7, angle = 45, hjust = 1))
htmap_no_log
library("knitr")
library("dplyr")
source("table-of-summary-information.R")
source("top-10-most-committed-crimes.R")
source("chicago_map.R")
source("summary-information.R")
source("plot_heat.R")
info <- get_summary_info(crime_summary)
info$total
info$arrest_rate
info$most_Freq
info$freq_crime
info$rate
info$LD
df <- get_summary_table(crime_summary)
colnames(df) <- c("Location Description Recorded",
"Number Of Crime Occurred",
"Percent of The Number of TotalCrime")
kable(df)
chart2
chart
htmap_with_log
htmap_no_log
```{r, echo=FALSE}
htmap_with_log
htmap_no_log
library("knitr")
library("dplyr")
source("table-of-summary-information.R")
source("top-10-most-committed-crimes.R")
source("chicago_map.R")
source("summary-information.R")
source("plot_heat.R")
info <- get_summary_info(crime_summary)
info$total
info$arrest_rate
info$most_Freq
info$freq_crime
info$rate
info$LD
df <- get_summary_table(crime_summary)
colnames(df) <- c("Location Description Recorded",
"Number Of Crime Occurred",
"Percent of The Number of TotalCrime")
kable(df)
chart2
chart
htmap_with_log
htmap_no_log
library("lintr")
lint("./data/plot_heat.R")
setwd("~/Documents/info201/final-project-mightymango/scripts")
lint("plot_heat.R")
library("dplyr")
library("ggplot2")
chicago_crime_10y <- read.csv("./data/chicago_crime_10y.csv")
#find number of each crime type
number_each_type <- chicago_crime_10y %>%
group_by(District, Primary.Type)  %>%
summarize(Crime.count = n())
number_each_type
#plot heatmap with a log of `Crime.count`
#able to see which crime type occured most offten
htmap_with_log <- ggplot(data = number_each_type,
aes(x = District, y = Primary.Type)) +
geom_tile(aes(fill = Crime.count)) +
scale_fill_gradient2(trans = "log") +
theme(axis.text.y = element_text(size = 6)) +
theme(axis.text.x = element_text(size = 7, angle = 45, hjust = 1))
htmap_with_log
#plot heatmap with a log of `Crime.count`
#able to see where crime type occur most offen
htmap_no_log <- ggplot(data = number_each_type,
aes(x = District, y = Primary.Type)) +
geom_tile(aes(fill = Crime.count)) +
scale_fill_gradient2() +
theme(axis.text.y = element_text(size = 6)) +
theme(axis.text.x = element_text(size = 7, angle = 45, hjust = 1))
htmap_no_log
lint("plot_heat.R")
lint("plot_heat.R")
library("knitr")
library("dplyr")
source("table-of-summary-information.R")
source("top-10-most-committed-crimes.R")
source("chicago_map.R")
source("summary-information.R")
source("plot_heat.R")
info <- get_summary_info(crime_summary)
info$total
info$arrest_rate
info$most_Freq
info$freq_crime
info$rate
info$LD
df <- get_summary_table(crime_summary)
colnames(df) <- c("Location Description Recorded",
"Number Of Crime Occurred",
"Percent of The Number of TotalCrime")
kable(df)
chart2
chart
htmap_with_log
htmap_no_log
library("lintr")
lint("top-10-most-committed-crimes.R")
lint("plot_heat.R")
